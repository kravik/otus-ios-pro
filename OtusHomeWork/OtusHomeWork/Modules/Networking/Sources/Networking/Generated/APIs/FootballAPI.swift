//
// FootballAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class FootballAPI {
    /**
     searches competitions
     
     - parameter areas: (query) Areas (optional)
     - parameter plan: (query) Plan - TIER_ONE (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCompetitions(areas: String? = nil, plan: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        getCompetitionsWithRequestBuilder(areas: areas, plan: plan).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     searches competitions
     - GET /competitions/
     - parameter areas: (query) Areas (optional)
     - parameter plan: (query) Plan - TIER_ONE (optional)
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func getCompetitionsWithRequestBuilder(areas: String? = nil, plan: String? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/competitions/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "areas": areas?.encodeToJSON(), 
            "plan": plan?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse200>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter competitionId: (path) competitionId 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter stage: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter matchday: (query)  (optional)
     - parameter group: (query)  (optional)
     - parameter season: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMatches(competitionId: Int, dateFrom: String? = nil, dateTo: String? = nil, stage: String? = nil, status: String? = nil, matchday: Int? = nil, group: String? = nil, season: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        getMatchesWithRequestBuilder(competitionId: competitionId, dateFrom: dateFrom, dateTo: dateTo, stage: stage, status: status, matchday: matchday, group: group, season: season).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /competitions/{competitionId}/matches
     - parameter competitionId: (path) competitionId 
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter stage: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter matchday: (query)  (optional)
     - parameter group: (query)  (optional)
     - parameter season: (query)  (optional)
     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func getMatchesWithRequestBuilder(competitionId: Int, dateFrom: String? = nil, dateTo: String? = nil, stage: String? = nil, status: String? = nil, matchday: Int? = nil, group: String? = nil, season: Int? = nil) -> RequestBuilder<InlineResponse2001> {
        var path = "/competitions/{competitionId}/matches"
        let competitionIdPreEscape = "\(APIHelper.mapValueToPathItem(competitionId))"
        let competitionIdPostEscape = competitionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{competitionId}", with: competitionIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "dateFrom": dateFrom?.encodeToJSON(), 
            "dateTo": dateTo?.encodeToJSON(), 
            "stage": stage?.encodeToJSON(), 
            "status": status?.encodeToJSON(), 
            "matchday": matchday?.encodeToJSON(), 
            "group": group?.encodeToJSON(), 
            "season": season?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter competitionId: (path) competitionId 
     - parameter stage: (query)  (optional)
     - parameter season: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTeams(competitionId: Int, stage: String? = nil, season: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        getTeamsWithRequestBuilder(competitionId: competitionId, stage: stage, season: season).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /competitions/{competitionId}/teams
     - parameter competitionId: (path) competitionId 
     - parameter stage: (query)  (optional)
     - parameter season: (query)  (optional)
     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func getTeamsWithRequestBuilder(competitionId: Int, stage: String? = nil, season: Int? = nil) -> RequestBuilder<InlineResponse2002> {
        var path = "/competitions/{competitionId}/teams"
        let competitionIdPreEscape = "\(APIHelper.mapValueToPathItem(competitionId))"
        let competitionIdPostEscape = competitionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{competitionId}", with: competitionIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "stage": stage?.encodeToJSON(), 
            "season": season?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
